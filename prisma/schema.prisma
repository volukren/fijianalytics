generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @map("email_verified")
  image         String?
  createdAt     DateTime  @map("created_at")
  updatedAt     DateTime  @map("updated_at")
  role          String    @default("user")
  sessions      Session[]
  accounts      Account[]

  members     Member[]
  invitations Invitation[]

  @@unique([email])
  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime @map("expires_at")
  token     String
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeOrganizationId String?

  @@unique([token])
  @@index([userId])
  @@map("sessions")
}

model Account {
  id                    String    @id
  accountId             String    @map("account_id")
  providerId            String    @map("provider_id")
  userId                String    @map("user_id")
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @map("access_token")
  refreshToken          String?   @map("refresh_token")
  idToken               String?   @map("id_token")
  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope                 String?
  password              String?
  createdAt             DateTime  @map("created_at")
  updatedAt             DateTime  @map("updated_at")

  @@index([userId])
  @@map("accounts")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime  @map("expires_at")
  createdAt  DateTime? @map("created_at")
  updatedAt  DateTime? @map("updated_at")

  @@map("verifications")
}

model Website {
  domain         String       @id
  createdAt      DateTime     @map("created_at")
  updatedAt      DateTime     @map("updated_at")
  public         Boolean      @default(false)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  activeSessions ActiveSession[]

  @@index([organizationId])
  @@map("websites")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime     @map("created_at")
  metadata    String?
  members     Member[]
  invitations Invitation[]
  websites    Website[]

  @@unique([slug])
  @@map("organizations")
}

model Member {
  id             String       @id
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String       @map("user_id")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime     @map("created_at")

  @@map("members")
}

model Invitation {
  id             String       @id
  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime     @map("expires_at")
  inviterId      String       @map("inviter_id")
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitations")
}

model ActiveSession {
  sessionId String   @id @default(cuid())
  visitorId String   @map("visitor_id")
  domain    String
  website   Website  @relation(fields: [domain], references: [domain], onDelete: Cascade)
  startedAt DateTime @map("started_at")
  endedAt   DateTime @map("ended_at")

  @@unique([visitorId, domain])
  @@map("active_sessions")
}
